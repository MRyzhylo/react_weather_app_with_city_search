{"version":3,"sources":["App.js","actions/fetchWeather.js","reducers/weatherReducer.js","store.js","index.js"],"names":["App","useState","city","setCity","weatherSelector","useSelector","state","dispatch","useDispatch","getWeatherInfoAction","fetch","then","res","json","JSONres","type","payload","catch","err","console","log","fetchWeather","useEffect","details","weatherinfo","sys","iconUrl","weather","icon","name","country","parseInt","main","temp","temp_min","temp_max","src","alt","Fragment","className","autocomplete","onSubmit","e","preventDefault","placeholder","onChange","target","value","weatherInfo","action","middleware","applyMiddleware","thunk","Store","createStore","reducers","ReactDOM","render","store","document","getElementById"],"mappings":"mTAgEeA,MA1Df,WAAgB,IAAD,EAEUC,mBAAS,IAFnB,mBAEPC,EAFO,KAEDC,EAFC,KAIPC,EAAkBC,YAAY,SAAAC,GAAK,OAAIA,IACvCC,EAAWC,cACXC,EAAuB,SAAAP,GAAI,OAAIK,ECZhC,WAAuC,IAAhBL,EAAe,uDAAV,SAE/B,OAAO,SAAUK,GACbG,MAAM,oDAAD,OAAqDR,EAArD,yDACJS,KAAK,SAAAC,GACF,OAAOA,EAAIC,SAEdF,KAAK,SAAAG,GACFP,EAAS,CACLQ,KAAK,gBACLC,QAASF,MAEdG,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MDDwBG,CAAanB,KAE3DoB,oBAAU,WACRb,KACA,IAEF,IASIc,EAAU,GAEZ,GAAGnB,EAAgBoB,aAAepB,EAAgBoB,YAAYC,IAAK,CACjE,IAAIC,EAAO,2CAAsCtB,EAAgBoB,YAAYG,QAAQ,GAAGC,KAA7E,WACXL,EACA,6BACE,iDACA,+BAAKnB,EAAgBoB,YAAYK,KAAjC,KAAwC,kCAAQzB,EAAgBoB,YAAYC,IAAIK,QAAxC,KAAxC,KACA,+BAAKC,SAAS3B,EAAgBoB,YAAYQ,KAAKC,MAA/C,WACA,oCAAUF,SAAS3B,EAAgBoB,YAAYQ,KAAKE,UAApD,WACA,oCAAUH,SAAS3B,EAAgBoB,YAAYQ,KAAKG,UAApD,WACA,yBAAKC,IAAKV,EAASW,IAAI,iBACvB,+BAAKjC,EAAgBoB,YAAYG,QAAQ,GAAGK,KAA5C,WAGFT,EACF,sFAGF,OACE,kBAAC,IAAMe,SAAP,KACA,yBAAKC,UAAU,OACb,4CAEF,0BAAMC,aAAa,MAAMC,SAjCJ,SAACC,GACtBA,EAAEC,iBACU,KAATzC,EACDiB,QAAQC,IAAI,mBAEZX,EAAqBP,KA6BrB,yBAAKqC,UAAU,WACb,2BAAOxB,KAAK,OAAOc,KAAK,OAAOe,YAAY,kBAAkBC,SAAU,SAACH,GAAD,OAAKvC,EAAQuC,EAAEI,OAAOC,WAE7F,2BAAOR,UAAU,MAAMxB,KAAK,SAASgC,MAAM,kBAC1CxB,M,0kBExDT,IASeyB,EATK,WAEL,IAFM1C,EAEP,uDAFe,CACzBkB,YAAa,IACdyB,EAAW,uCAIV,OAHGA,EAAOlC,KAAO,mBACbT,EAAK,KAAOA,EAAP,CAAckB,YAAayB,EAAOjC,WAEpCV,GCDL4C,EAAaC,YAAgBC,KAEpBC,EADDC,YAAYC,EAAUL,GCGpCM,IAASC,OACT,kBAAC,IAAD,CAAUC,MAAOL,GACb,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.03d932ea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport { fetchWeather } from './actions/fetchWeather';\r\n\r\nfunction App() {\r\n\r\n  const[city, setCity] = useState('');\r\n\r\n  const weatherSelector = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const getWeatherInfoAction = city => dispatch(fetchWeather(city));\r\n  \r\n  useEffect(()=>{\r\n    getWeatherInfoAction();\r\n  },[]);\r\n\r\n  const getWeatherInfo = (e) => {\r\n    e.preventDefault();\r\n    if(city === '') {\r\n      console.log('Enter city name');\r\n    } else {\r\n      getWeatherInfoAction(city);\r\n    }\r\n  }\r\n  \r\n  let details = '';\r\n  \r\n    if(weatherSelector.weatherinfo && weatherSelector.weatherinfo.sys) {\r\n      let iconUrl =`http://openweathermap.org/img/wn/${weatherSelector.weatherinfo.weather[0].icon}@2x.png`\r\n      details = \r\n      <div>\r\n        <h4>Weather Details :</h4>\r\n        <p> {weatherSelector.weatherinfo.name}, <span> {weatherSelector.weatherinfo.sys.country} </span> </p>\r\n        <p> {parseInt(weatherSelector.weatherinfo.main.temp)} &deg;C </p>\r\n        <p> min: {parseInt(weatherSelector.weatherinfo.main.temp_min)} &deg;C </p>\r\n        <p> max: {parseInt(weatherSelector.weatherinfo.main.temp_max)} &deg;C </p>\r\n        <img src={iconUrl} alt=\"weather-icon\" />\r\n        <p> {weatherSelector.weatherinfo.weather[0].main} </p>\r\n      </div>\r\n    } else {\r\n      details =\r\n    <p> You need to tape city name or this city doesn`t exist </p>\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <div className=\"App\">\r\n      <h1>City weather</h1>\r\n    \r\n    <form autocomplete=\"off\" onSubmit={getWeatherInfo}>\r\n      <div className='control'>\r\n        <input type='text' name='name' placeholder='Enter city name' onChange={(e)=>setCity(e.target.value)}/>\r\n      </div>\r\n        <input className='btn' type='submit' value='Check Weather' />\r\n        {details}\r\n    </form>\r\n    \r\n    </div>  \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export function fetchWeather (city=\"Dnipro\") {\r\n\r\n    return function (dispatch) {\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=219d0dabcadb73f4f993ceb867091930`)\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(JSONres=>{\r\n            dispatch({\r\n                type:'FETCH_WEATHER',\r\n                payload: JSONres\r\n            });\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n};","const weatherInfo = (state = {\r\n    weatherinfo: []\r\n}, action) => {\r\n    if(action.type = 'FETCH_WEATHER') {\r\n        state = {...state, weatherinfo: action.payload};\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default weatherInfo;","import thunk from 'redux-thunk';\r\nimport {applyMiddleware, createStore} from 'redux';\r\n\r\nimport reducers from './reducers/weatherReducer';\r\n\r\nconst middleware = applyMiddleware(thunk);\r\nconst Store = createStore(reducers, middleware);\r\nexport default Store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport Store from './store';\r\n\r\n\r\nReactDOM.render(\r\n<Provider store={Store}>\r\n    <App />\r\n</Provider>\r\n, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}